var start = clock();
var a = "Hello, " + "World!" ;
print a ;
print a ;
for (var i = 0; i < 10; i = i + 1)
{
	a = a + " :D";
	// var a = a + " D:"; // "Can't read local variable in its own initialiser."
	// print a;
	var b = a + " D:";
	print b;
}
print a;

print "";

print clock;
print clock();

print "";

print 1 + 2 ;
print (3 * 3) == 9 ;
print (420) ;
print (-(420)) ;
print (-(-(420))) ;
print !!!!true ;
print 1 < 2 ;
print 2 > 1 ;
print 1 >= 1 ;
print 23 >= 1 ;
print 1 <= 1 ;
print 1 <= 2 ;
print 0 == 0 ;
print 1 != 0 ;
print to_string(clock() - start) + " seconds";

fun sayHi(first, last) {
	print "Hi, " + first + " " + last + "!";
}

sayHi("Dear", "Reader");

fun fib(n) {
  if (n <= 1) return n;
  return fib(n - 2) + fib(n - 1);
}

for (var i = 0; i < 20; i = i + 1) {
  print fib(i);
}

fun makeCounter() {
  var i = 0;
  fun count() {
    i = i + 1;
    print i;
  }

  return count;
}

var counter = makeCounter();
counter(); // "1".
counter(); // "2".

var a = "global";
{
  fun showA() {
    print a;
  }

  showA();
  var a = "block";
  showA(); // should print "global"
}

class DevonshireCream {
  serveOn() {
    return "Scones";
  }
}

print DevonshireCream; // "DevonshireCream".

class Bagel {}
var bagel = Bagel();
print bagel; // "Bagel instance".

class Bacon {
  eat() {
    print "Crunch crunch crunch!";
  }
}

Bacon().eat(); // "Crunch crunch crunch!".

class Cake {
  taste() {
    var adjective = "delicious";
    print "The " + this.flavor + " cake is " + adjective + "!";
  }
}

var cake = Cake();
cake.flavor = "German chocolate";
cake.taste(); // Prints "The German chocolate cake is delicious!".

class Foo {
  init(asdf) {
    print asdf;
    print this;
  }
}

var foo = Foo("hello");
print foo.init("wah");

class Circle {
  init(radius) {
    this.radius = radius;
  }

  area() {
    return 3.141592653 * this.radius * this.radius;
  }
}

var circle = Circle(4);
print circle.area(); // roughly "50.2655".

class A {
  method() {
    print "A method";
  }
}

class B < A {
  method() {
    print "B method";
  }

  test() {
    super.method();
  }
}

class C < B {}

C().test();
